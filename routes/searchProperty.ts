// routes/searchProperty.ts
import { Router } from 'express';
import { PropertyRepository, SearchFilters } from '../repositories/propertyRepository';

const router = Router();

// üîç RUTA PRINCIPAL DE B√öSQUEDA - MANTENER INTACTA
router.get('/search', async (req, res) => {
  try {
    console.log('üîç Par√°metros de b√∫squeda recibidos:', req.query);
    
    // Extraer filtros de los query parameters
    const filters: SearchFilters = {};
    
    // Filtro de tipo de operaci√≥n (Venta/Arriendo)
    if (req.query.operation_type) {
      filters.operation_type = req.query.operation_type as string;
    }
    
    // Filtro de tipo de propiedad
    if (req.query.property_type) {
      filters.property_type_id = parseInt(req.query.property_type as string);
    }
    
    // Filtros de ubicaci√≥n
    if (req.query.city) {
      filters.city = req.query.city as string;
    }
    
    if (req.query.neighborhood) {
      filters.neighborhood = req.query.neighborhood as string;
    }
    
    // Filtros de precio
    if (req.query.price_min) {
      filters.price_min = parseInt(req.query.price_min as string);
    }
    
    if (req.query.price_max) {
      filters.price_max = parseInt(req.query.price_max as string);
    }
    
    // Filtros avanzados
    if (req.query.bedrooms_min) {
      filters.bedrooms_min = parseInt(req.query.bedrooms_min as string);
    }
    
    if (req.query.bathrooms_min) {
      filters.bathrooms_min = parseInt(req.query.bathrooms_min as string);
    }
    
    if (req.query.parking_spaces) {
      filters.parking_spaces_min = parseInt(req.query.parking_spaces as string);
    }
    
    if (req.query.socioeconomic_stratum) {
      filters.socioeconomic_stratum = parseInt(req.query.socioeconomic_stratum as string);
    }
    
    // Ordenamiento
    if (req.query.order) {
      filters.order = req.query.order as string;
    }
    
    console.log('üîß Filtros procesados:', filters);
    
    // Ejecutar b√∫squeda
    const properties = await PropertyRepository.searchAdvanced(filters);
    
    console.log(`üìä Propiedades encontradas: ${properties.length}`);
    
    // Responder con las propiedades encontradas
    res.json(properties);
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda de propiedades:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error interno del servidor',
      error: error instanceof Error ? error.message : 'Error desconocido'
    });
  }
});

// üè† NUEVA RUTA OPTIMIZADA PARA FILTRAR POR OPERACI√ìN
router.get('/filter/:operation', async (req, res) => {
  try {
    const operation = req.params.operation; // "Venta" o "Arriendo"
    
    // Validar que el tipo de operaci√≥n sea v√°lido
    if (!['Venta', 'Arriendo'].includes(operation)) {
      return res.status(400).json({
        success: false,
        message: 'Tipo de operaci√≥n inv√°lido. Use "Venta" o "Arriendo"'
      });
    }
    
    console.log(`üè† Filtrando propiedades por operaci√≥n: ${operation}`);
    
    const filters: SearchFilters = {
      operation_type: operation
    };
    
    const properties = await PropertyRepository.searchAdvanced(filters);
    
    console.log(`üìä Propiedades de ${operation} encontradas: ${properties.length}`);
    
    res.json({
      success: true,
      operation_type: operation,
      count: properties.length,
      properties: properties
    });
    
  } catch (error) {
    console.error('‚ùå Error al filtrar por operaci√≥n:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error al filtrar propiedades por operaci√≥n',
      error: error instanceof Error ? error.message : 'Error desconocido'
    });
  }
});

// üìä RUTA PARA OBTENER TODAS LAS PROPIEDADES CON SEPARACI√ìN POR OPERACI√ìN
router.get('/all-by-operation', async (req, res) => {
  try {
    console.log('üìä Obteniendo todas las propiedades separadas por operaci√≥n');
    
    // Obtener propiedades en venta
    const ventaFilters: SearchFilters = { operation_type: 'Venta' };
    const ventaProperties = await PropertyRepository.searchAdvanced(ventaFilters);
    
    // Obtener propiedades en arriendo
    const arriendoFilters: SearchFilters = { operation_type: 'Arriendo' };
    const arriendoProperties = await PropertyRepository.searchAdvanced(arriendoFilters);
    
    console.log(`üìà Estad√≠sticas: Venta(${ventaProperties.length}) - Arriendo(${arriendoProperties.length})`);
    
    res.json({
      success: true,
      statistics: {
        venta: {
          count: ventaProperties.length,
          properties: ventaProperties
        },
        arriendo: {
          count: arriendoProperties.length,
          properties: arriendoProperties
        },
        total: ventaProperties.length + arriendoProperties.length
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error al obtener propiedades por operaci√≥n:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error al obtener propiedades separadas por operaci√≥n'
    });
  }
});

// üîç RUTA ESPEC√çFICA PARA B√öSQUEDA R√ÅPIDA (solo para los botones)
router.post('/quick-filter', async (req, res) => {
  try {
    const { operation_type } = req.body;
    
    if (!operation_type || !['Venta', 'Arriendo'].includes(operation_type)) {
      return res.status(400).json({
        success: false,
        message: 'Debe especificar un tipo de operaci√≥n v√°lido: "Venta" o "Arriendo"'
      });
    }
    
    console.log(`‚ö° Filtrado r√°pido por: ${operation_type}`);
    
    const filters: SearchFilters = {
      operation_type: operation_type
    };
    
    const properties = await PropertyRepository.searchAdvanced(filters);
    
    res.json({
      success: true,
      filter_applied: operation_type,
      count: properties.length,
      properties: properties,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error en filtrado r√°pido:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error en filtrado r√°pido'
    });
  }
});

export default router;